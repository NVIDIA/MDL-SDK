/*----------------------------------------------------------------------
Compiler Generator Coco/R,
Copyright (c) 1990, 2004 Hanspeter Moessenboeck, University of Linz
extended by M. Loeberbauer & A. Woess, Univ. of Linz
ported to C++ by Csaba Balazs, University of Szeged
with improvements by Pat Terry, Rhodes University

This program is free software; you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the
Free Software Foundation; either version 2, or (at your option) any
later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

As an exception, it is allowed to write an extension of Coco/R that is
used as a plugin in non-free software.

If not otherwise stated, any source code generated by Coco/R (other than
Coco/R itself) does not fall under the GNU General Public License.
-----------------------------------------------------------------------*/

#include "Generator.h"
#include "Scanner.h"

namespace Coco {

Generator::Generator(Tab &tab, Errors &errors)
: tab(tab)
, errors(errors)
, fram(NULL)
, gen(NULL)
, frameFile()
{
}

FILE* Generator::OpenFrame(const char* frame) {
	if (!tab.frameDir.empty()) {
		frameFile = tab.frameDir + "/" + frame;
		fram = fopen(frameFile.c_str(), "r");
	}
	if (fram == NULL) {
		frameFile = tab.srcDir +  frame;  /* pdt */
		fram = fopen(frameFile.c_str(), "r");
	}
	if (fram == NULL) {
		std::string message = std::string("-- Cannot find : ") + frame;
		errors.Exception(message.c_str());
	}

	return fram;
}


FILE* Generator::OpenGen(const char *genName) { /* pdt */
	std::string fn = tab.outDir + genName; /* pdt */

	if ((gen = fopen(fn.c_str(), "r")) != NULL) {
		fclose(gen);
		std::string oldName = fn +  ".old";
		remove(oldName.c_str());
		rename(fn.c_str(), oldName.c_str()); // copy with overwrite
	}
	if ((gen = fopen(fn.c_str(), "w")) == NULL) {
		std::string message = std::string("-- Cannot generate : ") + genName;
		errors.Exception(message.c_str());
	}

	return gen;
}


void Generator::GenCopyright() {
	FILE *file = NULL;

	if (!tab.frameDir.empty()) {
		std::string copyFr = tab.frameDir + "/Copyright.frame";
		file = fopen(copyFr.c_str(), "r");
	}
	if (file == NULL) {
		std::string copyFr = tab.srcDir + "Copyright.frame";
		file = fopen(copyFr.c_str(), "r");
	}
	if (file == NULL) {
		return;
	}

	FILE *scannerFram = fram;
	fram = file;

	CopyFramePart(NULL);
	fram = scannerFram;

	fclose(file);
}

void Generator::GenPrefixFromNamespace() {
	if (tab.nsName.empty()) {
		return;
	}
	std::string nsName = tab.nsName;
	size_t const len = nsName.size();
	size_t startPos = 0;
	do {
		size_t curLen = nsName.find(COCO_CPP_NAMESPACE_SEPARATOR, startPos);
		if (curLen == std::string::npos) {
			curLen = len;
		}
		curLen -= startPos;
		std::string curNs = nsName.substr(startPos, curLen);
		fprintf(gen, "%s_", curNs.c_str());
		startPos = startPos + curLen + 1;
		if (startPos < len && nsName[startPos] == COCO_CPP_NAMESPACE_SEPARATOR) {
			++startPos;
		}
	} while (startPos < len);
}

void Generator::SkipFramePart(char const *stop) {
	CopyFramePart(stop, false);
}

void Generator::CopyFramePart(char const *stop) {
	CopyFramePart(stop, true);
}

void Generator::CopyFramePart(char const *stop, bool generateOutput) {
	char startCh = 0;
	int endOfStopString = 0;
	char ch = 0;

	if (stop != NULL) {
		startCh = stop[0];
		endOfStopString = coco_string_length(stop)-1;
	}

	int result = fscanf(fram, "%c", &ch); //	fram.ReadByte();
	while (result != EOF) {
		if (stop != NULL && ch == startCh) {
			int i = 0;
			do {
				if (i == endOfStopString) return; // stop[0..i] found
				result = fscanf(fram, "%c", &ch); i++;
				if (result == EOF)
				    break;
			} while (ch == stop[i]);
			if (result == EOF)
			    break;
			// stop[0..i-1] found; continue with last read character
			if (generateOutput) {
				char *subStop = coco_string_create(stop, 0, i);
				fprintf(gen, "%s", subStop);
				coco_string_delete(subStop);
			}
		} else {
			if (generateOutput) { fprintf(gen, "%c", ch); }
			result = fscanf(fram, "%c", &ch);
		}
	}
	if (stop != NULL) {
		std::string message = " -- Incomplete or corrupt frame file: " + frameFile;
		errors.Exception(message.c_str());
	}
}

}