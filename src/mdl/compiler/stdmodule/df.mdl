/******************************************************************************
 * Copyright (c) 2012-2025, NVIDIA CORPORATION. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *  * Neither the name of NVIDIA CORPORATION nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ******************************************************************************/
mdl 1.10;

using ::anno import hard_range, soft_range;
using ::state import texture_tangent_u, normal, transform_vector, coordinate_space;
import ::math::PI;

export enum scatter_mode {
    scatter_reflect,
    scatter_transmit,
    scatter_reflect_transmit
};

export declarative bsdf diffuse_reflection_bsdf(
    color          tint      = color(1.0),
    float          roughness = 0.0 [[ hard_range(0.0, 1.0) ]],
    uniform string handle    = ""
) [[ intrinsic(), removed(1,10) ]];

// Oren-Nayar diffuse reflection with optional energy compensation
export declarative bsdf diffuse_reflection_bsdf(
    color          tint              = color(1.0),
    float          roughness         = 0.0 [[ hard_range(0.0, 1.0) ]],
    color          multiscatter_tint = color(0.0),
    uniform string handle            = ""
) [[ intrinsic(), since(1,10) ]];

export declarative bsdf dusty_diffuse_reflection_bsdf(
    color          tint   = color( 1.0),
    uniform string handle = ""
) [[ intrinsic(), since(1,8) ]];

export declarative bsdf diffuse_transmission_bsdf(
    color          tint      = color(1.0),
    uniform string handle    = ""
) [[ intrinsic() ]];

export declarative bsdf specular_bsdf(
    color                tint = color(1.0),
    uniform scatter_mode mode = scatter_reflect,
    uniform string       handle = ""
) [[ intrinsic() ]];

export declarative bsdf simple_glossy_bsdf(
    float                roughness_u               [[ hard_range(0.0, +1.0/0.0) ]],
    float                roughness_v = roughness_u [[ hard_range(0.0, +1.0/0.0) ]],
    color                tint        = color(1.0),
    float3               tangent_u   = state::texture_tangent_u(0),
    uniform scatter_mode mode        = scatter_reflect,
    uniform string       handle      = ""
) [[ intrinsic(), removed(1,6) ]];

export declarative bsdf simple_glossy_bsdf(
    float                roughness_u                     [[ hard_range(0.0, +1.0/0.0) ]],
    float                roughness_v       = roughness_u [[ hard_range(0.0, +1.0/0.0) ]],
    color                tint              = color(1.0),
    color                multiscatter_tint = color(0.0),
    float3               tangent_u         = state::texture_tangent_u(0),
    uniform scatter_mode mode              = scatter_reflect,
    uniform string       handle            = ""
) [[ intrinsic(),since(1,6) ]];

export declarative bsdf backscattering_glossy_reflection_bsdf(
    float                roughness_u               [[ hard_range(0.0, +1.0/0.0) ]],
    float                roughness_v = roughness_u [[ hard_range(0.0, +1.0/0.0) ]],
    color                tint        = color(1.0),
    float3               tangent_u   = state::texture_tangent_u(0),
    uniform string       handle      = ""
) [[ intrinsic(), removed(1,6) ]];

export declarative bsdf backscattering_glossy_reflection_bsdf(
    float                roughness_u                     [[ hard_range(0.0, +1.0/0.0) ]],
    float                roughness_v       = roughness_u [[ hard_range(0.0, +1.0/0.0) ]],
    color                tint              = color(1.0),
    color                multiscatter_tint = color(0.0),
    float3               tangent_u         = state::texture_tangent_u(0),
    uniform string       handle            = ""
) [[ intrinsic(), since(1,6) ]];

export declarative bsdf measured_bsdf(
    uniform bsdf_measurement measurement,
    uniform float        multiplier  = 1.0,
    uniform scatter_mode mode        = scatter_reflect,
    uniform string       handle      = ""
) [[ intrinsic(), since(1,1) ]];

export declarative bsdf microfacet_beckmann_smith_bsdf(
    float                roughness_u               [[ hard_range(0.0, +1.0/0.0) ]],
    float                roughness_v = roughness_u [[ hard_range(0.0, +1.0/0.0) ]],
    color                tint        = color(1.0),
    float3               tangent_u   = state::texture_tangent_u(0),
    uniform scatter_mode mode        = scatter_reflect,
    uniform string       handle      = ""
) [[ intrinsic(), since(1,1), removed(1,6) ]];

export declarative bsdf microfacet_beckmann_smith_bsdf(
    float                roughness_u                     [[ hard_range(0.0, +1.0/0.0) ]],
    float                roughness_v       = roughness_u [[ hard_range(0.0, +1.0/0.0) ]],
    color                tint              = color(1.0),
    color                multiscatter_tint = color(0.0),
    float3               tangent_u         = state::texture_tangent_u(0),
    uniform scatter_mode mode              = scatter_reflect,
    uniform string       handle            = ""
) [[ intrinsic(), since(1,6) ]];

// anisotropic GGX distribution
export declarative bsdf microfacet_ggx_smith_bsdf(
    float                roughness_u               [[ hard_range(0.0, +1.0/0.0) ]],
    float                roughness_v = roughness_u [[ hard_range(0.0, +1.0/0.0) ]],
    color                tint        = color(1.0),
    float3               tangent_u   = state::texture_tangent_u(0),
    uniform scatter_mode mode        = scatter_reflect,
    uniform string       handle      = ""
) [[ intrinsic(), since(1,1), removed(1,6) ]];

export declarative bsdf microfacet_ggx_smith_bsdf(
    float                roughness_u                     [[ hard_range(0.0, +1.0/0.0) ]],
    float                roughness_v       = roughness_u [[ hard_range(0.0, +1.0/0.0) ]],
    color                tint              = color(1.0),
    color                multiscatter_tint = color(0.0),
    float3               tangent_u         = state::texture_tangent_u(0),
    uniform scatter_mode mode              = scatter_reflect,
    uniform string handle                  = ""
) [[ intrinsic(), since(1,6) ]];

export declarative bsdf microfacet_beckmann_vcavities_bsdf(
    float                roughness_u               [[ hard_range(0.0, +1.0/0.0) ]],
    float                roughness_v = roughness_u [[ hard_range(0.0, +1.0/0.0) ]],
    color                tint        = color(1.0),
    float3               tangent_u   = state::texture_tangent_u(0),
    uniform scatter_mode mode        = scatter_reflect,
    uniform string       handle      = ""
) [[ intrinsic(), since(1,1), removed(1,6) ]];

export declarative bsdf microfacet_beckmann_vcavities_bsdf(
    float                roughness_u                     [[ hard_range(0.0, +1.0/0.0) ]],
    float                roughness_v       = roughness_u [[ hard_range(0.0, +1.0/0.0) ]],
    color                tint              = color(1.0),
    color                multiscatter_tint = color(0.0),
    float3               tangent_u         = state::texture_tangent_u(0),
    uniform scatter_mode mode              = scatter_reflect,
    uniform string       handle            = ""
) [[ intrinsic(), since(1,6) ]];

export declarative bsdf microfacet_ggx_vcavities_bsdf(
    float                roughness_u               [[ hard_range(0.0, +1.0/0.0) ]],
    float                roughness_v = roughness_u [[ hard_range(0.0, +1.0/0.0) ]],
    color                tint        = color(1.0),
    float3               tangent_u   = state::texture_tangent_u(0),
    uniform scatter_mode mode        = scatter_reflect,
    uniform string       handle      = ""
) [[ intrinsic(), since(1,1), removed(1,6) ]];

export declarative bsdf microfacet_ggx_vcavities_bsdf(
    float                roughness_u                     [[ hard_range(0.0, +1.0/0.0) ]],
    float                roughness_v       = roughness_u [[ hard_range(0.0, +1.0/0.0) ]],
    color                tint              = color(1.0),
    color                multiscatter_tint = color(0.0),
    float3               tangent_u         = state::texture_tangent_u(0),
    uniform scatter_mode mode              = scatter_reflect,
    uniform string       handle            = ""
) [[ intrinsic(), since(1,6) ]];

export declarative bsdf ward_geisler_moroder_bsdf(
    float                roughness_u               [[ hard_range(0.0, +1.0/0.0) ]],
    float                roughness_v = roughness_u [[ hard_range(0.0, +1.0/0.0) ]],
    color                tint        = color(1.0),
    float3               tangent_u   = state::texture_tangent_u(0),
    uniform string       handle      = ""
) [[ intrinsic(), since(1,1), removed(1,6) ]];

export declarative bsdf ward_geisler_moroder_bsdf(
    float                roughness_u                     [[ hard_range(0.0, +1.0/0.0) ]],
    float                roughness_v       = roughness_u [[ hard_range(0.0, +1.0/0.0) ]],
    color                tint              = color(1.0),
    color                multiscatter_tint = color(0.0),
    float3               tangent_u         = state::texture_tangent_u(0),
    uniform string       handle            = ""
) [[ intrinsic(), since(1,6) ]];

export declarative bsdf sheen_bsdf(
    float roughness                      [[ hard_range(0.0, +1.0/0.0) ]],
    color tint              = color(1.0),
    color multiscatter_tint = color(0.0),
    uniform string handle   = ""
) [[ intrinsic(), since(1,6), removed(1,7) ]];

export declarative bsdf sheen_bsdf(
    float roughness                      [[ hard_range(0.0, +1.0/0.0) ]],
    color tint              = color(1.0),
    color multiscatter_tint = color(0.0),
    bsdf multiscatter       = diffuse_reflection_bsdf(color(1.0), 0.0, ""),
    uniform string handle   = ""
) [[ intrinsic(), since(1,7), removed(1,10) ]];

export declarative bsdf sheen_bsdf(
    float roughness                      [[ hard_range(0.0, +1.0/0.0) ]],
    color tint              = color(1.0),
    color multiscatter_tint = color(0.0),
    bsdf multiscatter       = diffuse_reflection_bsdf(color(1.0), 0.0, color(0.0), ""),
    uniform string handle   = ""
) [[ intrinsic(), since(1,10) ]];

export declarative bsdf microflake_sheen_bsdf(
    float                   roughness            [[ hard_range(0.0, 1.0) ]],
    color                   tint               = color(1.0f),
    color                   multiscatter_tint  = color(0.0),
    bsdf                    multiscatter       = diffuse_reflection_bsdf(
                                                     color(1.0), 0.0, color(0.0), ""),
    uniform string          handle             = ""
) [[ intrinsic(), since(1,10) ]];

export declarative bsdf coat_absorption_factor(
    color                    ior           = color(1.0),
    color                    absorption_coefficient = color(0.0),
    float                    thickness     = 0.0,
    bsdf                     base          = bsdf()
) [[ intrinsic(), since(1,10) ]];

export declarative edf diffuse_edf (
    uniform string handle = ""
) [[ intrinsic() ]];

// cos^k
export declarative edf spot_edf (
    uniform float         exponent,
    uniform bool          global_distribution = true,
    uniform float3x3      global_frame = float3x3(1.0),
    uniform string        handle = ""
) [[ intrinsic(), removed(1,1) ]];

export declarative edf spot_edf (
    uniform float         exponent,
    uniform float         spread = math::PI,
    uniform bool          global_distribution = true,
    uniform float3x3      global_frame = float3x3(1.0),
    uniform string        handle = ""
) [[ intrinsic(), since(1,1) ]];

export declarative edf measured_edf (
    uniform light_profile profile,
    uniform bool          global_distribution = true,
    uniform float3x3      global_frame = float3x3(1.0),
    uniform string        handle = ""
) [[ intrinsic(), removed(1,1) ]];

export declarative edf measured_edf(
    uniform light_profile profile,
    uniform float         multiplier          = 1.0,
    uniform bool          global_distribution = true,
    uniform float3x3      global_frame        = float3x3(1.0),
    uniform string        handle              = ""
) [[ intrinsic(), since(1,1), removed(1,2) ]];

export declarative edf measured_edf(
    uniform light_profile profile,
    uniform float         multiplier          = 1.0,
    uniform bool          global_distribution = true,
    uniform float3x3      global_frame        = float3x3(1.0),
    float3                tangent_u           = state::texture_tangent_u(0),
    uniform string        handle              = ""
) [[ intrinsic(), since(1,2) ]];

// volume specifications
export declarative vdf anisotropic_vdf (
    float directional_bias = 0.0 [[ hard_range(-1.0, 1.0) ]],
    uniform string handle  = ""
) [[ intrinsic() ]];

export declarative vdf fog_vdf(
    float particle_size = 8.0f,
    uniform string handle = ""
) [[ intrinsic(), since(1,8) ]];

// recoloring of bsdf, edf, and vdf
export declarative bsdf tint(color tint, bsdf base) [[ intrinsic() ]];

export declarative bsdf tint(
    color reflection_tint,
    color transmission_tint,
    bsdf  base
)  [[ intrinsic(), since(1,6) ]];

export declarative edf tint(
    uniform color tint,
    edf base) [[ intrinsic(), removed(1,7) ]];

export declarative edf tint(
    color tint,
    edf base) [[ intrinsic(), since(1,7) ]];

export declarative vdf tint(
    color tint,
    vdf   base) [[ intrinsic(), since(1,7) ]];

export declarative hair_bsdf tint(color tint, hair_bsdf base) [[ intrinsic(), since(1,6) ]];

// thin film effect modifier
export declarative bsdf thin_film( float thickness, color ior, bsdf base) [[ intrinsic() ]];

// custom curve factor for blending backscattering glossy with forward scattering
export declarative bsdf directional_factor(
    color  normal_tint  = color(1.0),
    color  grazing_tint = color(1.0),
    float  exponent     = 5.0,
    bsdf   base         = bsdf()
) [[ intrinsic(), removed(1,10) ]];

export declarative bsdf directional_factor(
    color  normal_tint   = color(1.0),
    color  grazing_tint  = color(1.0),
    color  f82_factor    = color(1.0),
    float  exponent      = 5.0,
    bsdf   base          = bsdf()
) [[ intrinsic(), since(1,10) ]];

export declarative edf directional_factor(
    color  normal_tint  = color(1.0),
    color  grazing_tint = color(1.0),
    float  exponent     = 5.0,
    edf    base         = edf()
) [[ intrinsic(), since(1,7) ]];

// component structs for mixers
export declarative struct bsdf_component {
    float weight    = 0.0 [[ hard_range(0.0, +1.0/0.0), soft_range(0.0, 1.0) ]];
    bsdf  component = bsdf();
};

export declarative struct edf_component {
    float weight = 0.0 [[ hard_range(0.0, +1.0/0.0), soft_range(0.0, 1.0) ]];
    edf  component = edf();
};

export declarative struct vdf_component {
    float weight    = 0.0 [[ hard_range(0.0, +1.0/0.0), soft_range(0.0, 1.0) ]];
    vdf  component = vdf();
};

// mixing of xdf
export declarative bsdf normalized_mix( bsdf_component[<N>] components) [[ intrinsic() ]];
export declarative edf  normalized_mix( edf_component[<N>]  components) [[ intrinsic() ]];
export declarative vdf  normalized_mix( vdf_component[<N>]  components) [[ intrinsic() ]];
export declarative bsdf clamped_mix(    bsdf_component[<N>] components) [[ intrinsic() ]];
export declarative edf  clamped_mix(    edf_component[<N>]  components) [[ intrinsic() ]];
export declarative vdf  clamped_mix(    vdf_component[<N>]  components) [[ intrinsic() ]];

// layering of bsdf
export declarative bsdf weighted_layer(
    float  weight [[ hard_range(0.0, 1.0) ]],
    bsdf   layer,
    bsdf   base   = bsdf(),
    float3 normal = state::normal()
) [[ intrinsic() ]];

export declarative bsdf fresnel_layer(
    color  ior,
    float  weight = 1.0 [[ hard_range(0.0, 1.0) ]],
    bsdf   layer  = bsdf(),
    bsdf   base   = bsdf(),
    float3 normal = state::normal()
) [[ intrinsic(), removed(1,4) ]];

export declarative bsdf custom_curve_layer(
    float  normal_reflectivity,
    float  grazing_reflectivity = 1.0,
    float  exponent = 5.0, // Schlick's approximation
    float  weight = 1.0 [[ hard_range(0.0, 1.0) ]],
    bsdf   layer  = bsdf(),
    bsdf   base   = bsdf(),
    float3 normal = state::normal()
) [[ intrinsic() ]];

export declarative bsdf measured_curve_layer(
    color[<N>]          curve_values,
    float               weight = 1.0,
    bsdf                layer = bsdf(),
    bsdf                base = bsdf(),
    float3              normal = state::normal()
) [[ intrinsic(), since(1,1) ]];

export declarative bsdf measured_curve_factor(
    color[<N>]          curve_values,
    bsdf                base = bsdf()
) [[ intrinsic(), since(1,1) ]];

export float light_profile_power(
    uniform light_profile profile) uniform [[ intrinsic(), since(1,1) ]];
export float light_profile_maximum(
    uniform light_profile profile) uniform [[ intrinsic(), since(1,1) ]];

// check for valid resource
export bool light_profile_isvalid(
    uniform light_profile profile) uniform [[ intrinsic(), since(1,2) ]];
export bool bsdf_measurement_isvalid(
    uniform bsdf_measurement measurement) uniform [[ intrinsic(), since(1,2) ]];

export declarative struct color_bsdf_component  [[ since(1,4) ]] {
    color weight = color(0.0)  [[ hard_range(color(0.0), color(1.0)) ]];
    bsdf component = bsdf();
};

export declarative struct color_edf_component  [[ since(1,4) ]] {
    color weight = color(0.0)  [[ hard_range(color(0.0), color(1.0)) ]];
    edf component = edf();
};

export declarative struct color_vdf_component  [[ since(1,7) ]] {
    color weight = color(0.0)  [[ hard_range(color(0.0), color(1.0)) ]];
    vdf component = vdf();
};

export declarative bsdf color_normalized_mix(
    color_bsdf_component[<N>] components) [[ intrinsic(), since(1,4) ]];
export declarative edf  color_normalized_mix(
    color_edf_component[<N>]  components) [[ intrinsic(), since(1,4) ]];
export declarative vdf  color_normalized_mix(
    color_vdf_component[<N>]  components) [[ intrinsic(), since(1,7) ]];

export declarative bsdf color_clamped_mix(
    color_bsdf_component[<N>] components) [[ intrinsic(), since(1,4) ]];
export declarative edf  color_clamped_mix(
    color_edf_component[<N>]  components) [[ intrinsic(), since(1,4) ]];
export declarative vdf  color_clamped_mix(
    color_vdf_component[<N>]  components) [[ intrinsic(), since(1,7) ]];

// layering of bsdf
export declarative bsdf color_weighted_layer(
    color  weight,
    bsdf   layer,
    bsdf   base   = bsdf(),
    float3 normal = state::normal()
) [[ intrinsic(), since(1,4) ]];

export declarative bsdf fresnel_layer(
    float  ior,
    float  weight = 1.0 [[ hard_range(0.0, 1.0) ]],
    bsdf   layer  = bsdf(),
    bsdf   base   = bsdf(),
    float3 normal = state::normal()
) [[ intrinsic(), since(1,4) ]];

export declarative bsdf color_fresnel_layer(
    color  ior,
    color  weight = color(1.0) [[ hard_range(color(0.0), color(1.0)) ]],
    bsdf   layer  = bsdf(),
    bsdf   base   = bsdf(),
    float3 normal = state::normal()
) [[ intrinsic(), since(1,4) ]];

export declarative bsdf color_custom_curve_layer(
    color  normal_reflectivity,
    color  grazing_reflectivity = color(1.0),
    float  exponent             = 5.0,
    color  weight               = color(1.0) [[ hard_range(color(0.0), color(1.0)) ]],
    bsdf   layer                = bsdf(),
    bsdf   base                 = bsdf(),
    float3 normal               = state::normal()
) [[ intrinsic(), since(1,4), removed(1,10) ]];

export declarative bsdf color_custom_curve_layer(
    color  normal_reflectivity,
    color  grazing_reflectivity = color(1.0),
    color  f82_factor           = color(1.0),
    float  exponent             = 5.0,
    color  weight               = color(1.0) [[ hard_range(color(0.0), color(1.0)) ]],
    bsdf   layer                = bsdf(),
    bsdf   base                 = bsdf(),
    float3 normal               = state::normal()
) [[ intrinsic(), since(1,10) ]];

export declarative bsdf color_measured_curve_layer(
    color[<N>] curve_values,
    color      weight = color(1.0) [[ hard_range(color(0.0), color(1.0)) ]],
    bsdf       layer  = bsdf(),
    bsdf       base   = bsdf(),
    float3     normal = state::normal()
) [[ intrinsic(), since(1,4) ]];

export declarative bsdf fresnel_factor(
    color ior,                     // n(Eta), refractive index, per wavelength
    color extinction_coefficient,  // k, extinction coefficient, per wavelength
    bsdf  base = bsdf()
) [[ intrinsic(), since(1,4) ]];

export declarative bsdf measured_factor(
    uniform texture_2d values,
    bsdf  base = bsdf()
) [[ intrinsic(), since(1,5) ]];

export declarative hair_bsdf chiang_hair_bsdf(
    float   diffuse_reflection_weight = 0.0,
    color   diffuse_reflection_tint   = color(1.0),
    float2  roughness_R   = float2(0.0),
    float2  roughness_TT  = roughness_R,
    float2  roughness_TRT = roughness_TT,
    float   cuticle_angle = 0.0,
    color   absorption_coefficient = color(0.0),
    float   ior = 1.55,
    uniform string handle = ""
) [[ intrinsic(), since(1,5) ]];

export declarative bsdf unbounded_mix(
    bsdf_component[<N>] components) [[ intrinsic(), since(1,7) ]];
export declarative edf unbounded_mix(
    edf_component[<N>]  components) [[ intrinsic(), since(1,7) ]];
export declarative vdf unbounded_mix(
    vdf_component[<N>]  components) [[ intrinsic(), since(1,7) ]];

export declarative bsdf color_unbounded_mix(
    color_bsdf_component[<N>] components) [[ intrinsic(), since(1,7) ]];
export declarative edf color_unbounded_mix(
    color_edf_component[<N>]  components) [[ intrinsic(), since(1,7) ]];
export declarative vdf color_unbounded_mix(
    color_vdf_component[<N>]  components) [[ intrinsic(), since(1,7) ]];
