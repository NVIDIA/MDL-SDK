/******************************************************************************
 * Copyright (c) 2022-2025, NVIDIA CORPORATION. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *  * Neither the name of NVIDIA CORPORATION nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *****************************************************************************/

rules Attr_syntax topdown {

      // Simple attribute in pattern position with wildcard.
      material(thin_walled,
               surface,
               backface,
               ior,
               volume,
               geometry,
               hair)
          [[ _a ~ _ ]] // Prefix with "_" to suppress warning.
      -->
        material(thin_walled,
                 surface,
                 backface,
                 ior,
                 volume,
                 geometry,
                 hair)
        ;

      // Attribute in pattern position with more complicated pattern.
      material(thin_walled,
               surface,
               backface,
               ior,
               volume,
               geometry,
               hair)
          [[ _a ~ diffuse_reflection_bsdf(_,_) ]] // Prefix with "_" to suppress warning.
      -->
        material(thin_walled,
                 surface,
                 backface,
                 ior,
                 volume,
                 geometry,
                 hair)
        ;

      // Simple attribute in pattern position without binding.
      material(_thin_walled,
               surface,
               backface,
               ior,
               volume,
               geometry,
               hair)
          [[ tw ]]
      -->
        material(tw,
                 surface,
                 backface,
                 ior,
                 volume,
                 geometry,
                 hair)
        ;

}

rules Attr_syntax_bu bottomup {
      // Simple attribute in expression position.
      material(thin_walled,
               surface,
               backface,
               ior,
               volume,
               geometry,
               hair)
      -->
        material(thin_walled,
                 surface,
                 backface,
                 ior,
                 volume,
                 geometry,
                 hair)
          [[ is_thin_walled = thin_walled ]]
          if thin_walled == true
        ;

      // More complicated attribute in expression position.
      material(thin_walled,
               surface,
               backface,
               ior,
               volume,
               geometry,
               hair)
      -->
        material(thin_walled,
                 surface,
                 backface,
                 ior,
                 volume,
                 geometry,
                 hair)
          [[ base = diffuse_reflection_bsdf(color(1.0), 0.0) ]]
        ;

}