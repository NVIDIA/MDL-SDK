/***************************************************************************************************
 * Copyright (c) 2024-2025, NVIDIA CORPORATION. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *  * Neither the name of NVIDIA CORPORATION nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **************************************************************************************************/

// Test also weak relative file paths.
mdl 1.5;

import ::df::*;
import ::tex::*;

// Textures in a function body that gets inlined into the compiled material.
export color func_inline()
{
    return   tex::lookup_color(texture_2d("./resources/test1001.png"), float2(1,0))
           + tex::lookup_color(texture_2d("resources/test1001.png"),   float2(0,1));
}

// Textures in a function body that does not get inlined into the compiled material.
export color func_noinline()
{
    color c;
    for(int i = 0; i < 10; ++i)
        c += tex::lookup_color(texture_2d("./resources/test1002.png"), float2(i,0))
          +  tex::lookup_color(texture_2d("resources/test1002.png"),   float2(0,i));
    return c;
}

// Textures as arguments of the compiled material.
export material test_resources(
    uniform texture_2d param0 = texture_2d("./resources/test1011.png"),
    uniform texture_2d param1 = texture_2d("resources/test1011.png"))
= let {
    color r = tex::lookup_color(param0, float2(1,0)) + tex::lookup_color(param1, float2(0,1));
    color g = func_inline();
    color b = func_noinline();
    color tint = (r+g+b)/3;
} in material(
    surface: material_surface(scattering: df::diffuse_reflection_bsdf(tint: tint))
);
