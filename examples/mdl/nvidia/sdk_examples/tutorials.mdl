/******************************************************************************
 * Copyright (c) 2018-2025, NVIDIA CORPORATION. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *  * Neither the name of NVIDIA CORPORATION nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *  * Neither the name of NVIDIA CORPORATION nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *****************************************************************************/

mdl 1.6;

import ::anno::*;
import ::base::*;
import ::df::*;
import ::math::*;
import ::state::*;
import ::tex::*;

// A simple struct.
export struct example_struct {
    int param_int;
    float param_float = 0.0;
};

// A constant.
export const int example_constant = 42;

// A simple material.
export material example_material(color tint = color(1.0), float roughness = 0)
= let bsdf tmp = df::diffuse_reflection_bsdf(tint, roughness);
in material(
    surface: material_surface(scattering: tmp),
    backface: material_surface(scattering: tmp)
);

// A simple function.
export color example_function(color tint, float distance)
{
    return distance <= 0 ? color(0.0) : -1.0 * math::log(tint) / distance;
}

// A material used for instance compilation vs class compilation.
export material example_compilation(color tint = color(1.0))
= material(
    surface: material_surface(
        scattering: df::diffuse_reflection_bsdf(tint: tint)
    ),
    backface: material_surface(
        scattering: df::diffuse_reflection_bsdf(tint: tint * color(state::normal()))
    )
);

// The first material used to show the execution of material sub-expressions.
export material example_execution1(color tint = color(1.0))
= let {
    float3 tex_coord = state::texture_coordinate(0);
    base::texture_return tex = base::file_texture(texture_2d("./resources/example.png"));
}
in material(
    surface: material_surface(
        scattering: df::diffuse_reflection_bsdf(
            tint: tint *
                color(
                    0.5,
                    math::sin(state::position().y) * 0.4 + 0.6,
                    math::cos(state::position().x) * 0.3 + 0.5) *
                (
                    1.1 * tex.tint * tex.mono +
                    base::perlin_noise_texture(
                        uvw: base::texture_coordinate_info(
                            position: tex_coord + state::animation_time() * float3(0, 0, 0.04)
                        ),
                        color1: color(0.1),
                        color2: color(0.7),
                        size: .2,
                        noise_levels: 4
                    ).tint * (1 - tex.mono * 0.5)
        )
        )
    )
);

// Calculate height of waves at the given position.
export float wave_height(
    float2    pos,
    float2[3] wave_centers = float2[3](float2(0.2, 0.7), float2(0.6, 0.4), float2(0.35, 0.6)))
{
    float radians_per_unit = 5 * 2 * math::PI;
    float val = 0;
    for ( int i = 0; i < 3; ++i ) {
        float dist = math::distance(pos, wave_centers[i]);
        val += math::cos(dist * radians_per_unit);
    }

    return (math::cos(val * math::PI) + 1) / 2;
}

// Calculate the gradient of the waves at the given texture coordinates.
export float3 wave_gradient(
    base::texture_coordinate_info  uvw = base::texture_coordinate_info(),
    float3     normal = state::normal(),
    float      delta = 0.01,
    float      factor = 1.0,
    float2[3]  wave_centers = float2[3](float2(0.2, 0.7), float2(0.6, 0.4), float2(0.35, 0.6)))
{
    float2[3] offsets(
        float2(0.0,   0.0),
        float2(delta, 0.0),
        float2(0.0,   delta)
    );
    float[3] results;
    for ( int i = 0; i < 3; ++i ) {
        float2 pos = float2(
            uvw.position.x + offsets[i].x,
            uvw.position.y + offsets[i].y);
        results[i] = wave_height(pos, wave_centers);
    }
    if ( (results[2] == results[0]) && (results[1] == results[0]) ) {
        return normal;
    } else {
        return math::normalize(
            normal +
            uvw.tangent_v * (results[2] - results[0]) * factor +
            uvw.tangent_u * (results[1] - results[0]) * factor);
   }
}

// A second material used to show the execution of material sub-expressions.
export material example_execution2(
    float3 light_pos = float3(-5, 3, 5))
= let {
    float time = state::animation_time();
    float2[3] wave_centers = float2[3](
        float2(0.2 + 0.2 * math::cos(0.3 * time), 0.7 + 0.3 * math::sin(0.4 * time)),
        float2(0.6, 0.4),
        float2(0.35, 0.6));
    float3 grad = wave_gradient(wave_centers: wave_centers);
    base::texture_return tex = base::file_texture(
        texture_2d("./resources/example.png"),
        uvw: base::texture_coordinate_info(
            position: state::texture_coordinate(0) + 0.02 * grad
        ));
}
in material(
    surface: material_surface(
        scattering: df::diffuse_reflection_bsdf(
            tint:
                (
                    color(0.3) * (1 - tex.mono * 0.5) + (1.4 * tex.tint * tex.mono)
                ) *
                math::dot(grad, math::normalize(light_pos))
        )
    )
);

// A third material used to show the execution of material sub-expressions.
export material example_execution3()
= let {
    float time = state::animation_time();
    float3 pos = state::texture_coordinate(0) +
        (4 + math::cos(0.005 * time)) *
        float3(math::sin(0.005 * time), math::cos(0.005 * time), 0);
    base::texture_return tex = base::file_texture(texture_2d("./resources/example.png"));
}
in material(
    surface: material_surface(
        scattering: df::diffuse_reflection_bsdf(
            tint: (tex.tint * tex.mono) +
                (1 - tex.mono * 0.8) * base::flake_noise_texture(
                    uvw: base::texture_coordinate_info(position: pos),
                    scale: 0.1,
                    maximum_size: 1.2,
                    noise_type: 1).tint
        )
    )
);

const float[4] global_arr(0.25, 0.7, 0.4, 1);

// Example material using the rodata-segment in HLSL.
export material example_execution4()
= let {
    float time = state::animation_time();
    float3 pos = state::texture_coordinate(0);
}
in material(
    surface: material_surface(
        scattering: df::diffuse_reflection_bsdf(
            tint: color(0.5 + math::cos(time * 2 * math::PI / 4) / 2) * global_arr[int(pos.x * 8) & 3]
        )
    )
);

// simple material with textures and light profile
export material example_modulemdl_material_examples(
    color tint = color(1.0),
    uniform light_profile profile = light_profile("./resources/example_modules.ies")
) = let {
    base::texture_return tex = base::file_texture(texture_2d("./resources/example.png"));
}
in material(
    surface: material_surface(
        scattering: df::diffuse_reflection_bsdf(
            tint: tex.tint
        ),
        emission:  material_emission (
            emission: df::measured_edf(profile: profile, global_distribution: true, global_frame: float3x3(1.,0,0,   0,0,1.,  0.,1,0) ),
            intensity: tint
        )
    )
);

// simple measured material
export material example_modules2()
 =  material (
    surface: material_surface(
        scattering: df::measured_bsdf(
            measurement: bsdf_measurement("./resources/example_modules.mbsdf"),
            multiplier: 1
        )
    )
);

export struct checker_value {
    float2 roughness;
    float weight;
};

export enum Options {
   None,
   Checker
};

export checker_value checker(float2 uv, float roughness, float anisotropy)
{
    checker_value val;
    bool x =  (int(uv.x) & 1) != 0;
    bool y =  (int(uv.y) & 1) != 0;

    if (x != y)  {
        float iso = (1.0f - anisotropy);
        val.roughness = x ? float2(roughness * iso, roughness / iso) : float2(roughness / iso, roughness * iso);
        val.weight = 1.0f;
    }
    return val;
}

// get a checker pattern based on the UV coordinate.
// used by the create expression graph python example.
export color color_checker(
    float scale = 1.0f,
    color a = color(1.0),
    color b = color(0.0))
{
    float3 uvw = state::texture_coordinate(0);
    float2 uv = float2(uvw.x, uvw.y) * scale;
    bool x =  (int(uv.x) & 1) != 0;
    bool y =  (int(uv.y) & 1) != 0;
    return x == y ? a : b;
}

// a material combining a diffuse, glossy, and specular
export material example_df(
    float tex_coord_scale = 14.0f,
    float checker_scale = 1.0f,
    color glossy_tint = color(0.3f, 0.5f, 1.0f),
    float glossy_weight = 1.0f
    [[
        anno::hard_range(0.0f, 1.0f)
    ]],
    color diffuse_tint = color(1.0f, 0.5f, 0.3f),
    float diffuse_weight = 0.25f
    [[
        anno::hard_range(0.0f, 1.0f)
    ]],
    float clearcoat_ior = 1.5f
    [[
        anno::hard_range(1.0f, 10.0f)
    ]],
    float roughness = 0.1f
    [[
        anno::hard_range(0.0f, 1.0f)
    ]],
    float anisotropy = 0.5f
    [[
        anno::hard_range(0.0f, 1.0f)
    ]],
    Options add_checker = Checker,
    color emission_intensity = color(0.25f,0.5f,0.75f),
    uniform float emission_intensity_scale = 0.5f
    [[
        anno::hard_range(0.0f, 10.0f)
    ]],
    uniform string emission_usage = "full",
    uniform texture_2d tex = "./resources/example.png"
)
= let {
    float3 tex_coord3 = state::texture_coordinate(0);
    float2 tex_coord = float2(tex_coord3.x, tex_coord3.y) * tex_coord_scale;
    color tex_value = tex::lookup_color(tex, tex_coord);
    checker_value cval = add_checker != None ? checker(tex_coord * checker_scale, roughness, anisotropy) : checker_value();
    color scaled_intensity =
        emission_usage == "full" ? emission_intensity * emission_intensity_scale :
        emission_usage == "half" ? 0.5 * emission_intensity * emission_intensity_scale :
        color(0);
}
in material(
    surface: material_surface(
        scattering: df::fresnel_layer(
            ior: clearcoat_ior,
            layer: df::specular_bsdf(
                handle: "coat"
            ),
            base: df::normalized_mix(
                df::bsdf_component[2](
                    df::bsdf_component(
                        weight: diffuse_weight,
                        component: df::diffuse_reflection_bsdf(
                            tint: tex_value * diffuse_tint,
                            handle: "base")),
                    df::bsdf_component(
                        weight: glossy_weight * cval.weight,
                        component: df::simple_glossy_bsdf(
                            roughness_u: cval.roughness.x, 
                            roughness_v: cval.roughness.y, 
                            tint: glossy_tint,
                            handle: "base"))
                )
            )
        ),
        emission:  material_emission (
            emission: df::diffuse_edf(
                handle: "glow"),
            intensity: scaled_intensity
        )
    )
);


export material example_edf(

    color diffuse_tint = color(0.0f),
    uniform float exponent = 32.0f
    [[
        anno::hard_range(0.0f, 1024.0f)
    ]],

    uniform float spread = math::PI
    [[
        anno::hard_range(0.0f, math::PI)
    ]],

    uniform color emission_intensity = color(0.25f,0.5f,0.75f),

    uniform float emission_intensity_scale = 1.0f
    [[
        anno::hard_range(0.0f, 10.0f)
    ]],

    uniform float diffuse_emission_weight = 0.25f
    [[
        anno::hard_range(0.0f, 1.0f)
    ]],

    uniform float spot_emission_weight = 0.25f
    [[
        anno::hard_range(0.0f, 1.0f)
    ]],

    uniform bool spot_global_distribution = false
)
= let {
    color scaled_intensity = emission_intensity * emission_intensity_scale;
 } 
 in material(
    surface: material_surface(
        scattering: df::diffuse_reflection_bsdf(
            tint: diffuse_tint
        ),
        emission: material_emission (
            emission: df::clamped_mix(
                df::edf_component[3](
                    df::edf_component(
                        weight: 0.5f,
                        component: edf()
                    ),
                    df::edf_component(
                        weight: diffuse_emission_weight,
                        component: df::diffuse_edf()
                    ),
                    df::edf_component(
                        weight: spot_emission_weight,
                        component: df::spot_edf(
                            exponent: exponent,
                            spread: spread,
                            global_distribution: spot_global_distribution
                        )
                    )
                )
            ),
            intensity: scaled_intensity
        )
    )
);


// A simple texture modulated material.
export material example_mod_rough(color tint = color(1.0), float roughness = 0)
= let {
    uniform texture_2d tex = texture_2d("./resources/example_roughness.png", ::tex::gamma_linear);
    float3 tex_coord = state::texture_coordinate(0);
    float mod_roughness = roughness * tex::lookup_float3(tex, float2(tex_coord.x, tex_coord.y)).x;
    bsdf tmp = df::diffuse_reflection_bsdf(tint, mod_roughness);
} in material(
    surface: material_surface(scattering: tmp),
    backface: material_surface(scattering: tmp)
);

export material dxr_sphere_mat(
    color tint = color(0.3), 
    float roughness_scale = 1.0,
    float roughness_offset = 0.25
)
[[
    anno::key_words(string[]("metal", "dirty", "testing"))
]]
 = let {
    uniform texture_2d tex = texture_2d("./resources/example_roughness.png", ::tex::gamma_linear);
    float3 tex_coord = state::texture_coordinate(0);
    float mod_roughness = roughness_offset + roughness_scale * tex::lookup_float3(tex, float2(tex_coord.x, tex_coord.y)).x;
} in material(
    surface: material_surface(
        scattering: df::simple_glossy_bsdf(
            roughness_u: mod_roughness,
            tint: tint
        )
    )
);

// simple measured material
export material example_measured_bsdf(
    uniform df::scatter_mode mode = df::scatter_reflect_transmit,
    uniform bsdf_measurement mbsdf = bsdf_measurement("./resources/example_modules.mbsdf"),
    uniform float multiplier = 1.0
) = material (
    surface: material_surface(
        scattering: df::measured_bsdf(
            measurement: mbsdf,
            multiplier: multiplier,
            mode: mode
        )
    )
);

// simple material with a light profile
export material example_measured_edf(
    color tint = color(0.0),
    uniform light_profile profile = light_profile("./resources/example_modules.ies"),
    uniform bool global_distribution = false,
    uniform float multiplier = 1.0
    [[anno::hard_range(0.0f, 10.0f)]]
) 
= material(
    surface: material_surface(
        scattering: df::diffuse_reflection_bsdf(
            tint: tint
        ),
        emission:  material_emission (
            emission: df::measured_edf(
                profile: profile,
                global_distribution: global_distribution,
                multiplier: multiplier / df::light_profile_power(profile)
            ),
            intensity: color(1.0)
        )
    )
);

// sample material with some parameters for testing the mdle example
export material example_texture_lookup_bsdf(
    uniform texture_2d tex = texture_2d("./resources/example.png", ::tex::gamma_default),
    uniform texture_2d tex2 = texture_2d("./resources/example.png", ::tex::gamma_default)
) [[
    anno::author("NVIDIA Corporation"),
    anno::display_name("aaa"),
    anno::hidden(),
    anno::description("test material")
]] = let {
    float3 tex_coord = state::texture_coordinate(0);
} in material(
    surface: material_surface(
        scattering: df::diffuse_reflection_bsdf(
            tint: color(tex::lookup_float3(tex, float2(tex_coord.x, tex_coord.y))) * color(tex::lookup_float3(tex2, float2(tex_coord.x, tex_coord.y)))
        )
    )
);

// A function with a single parameter with default.
export int fd_1(int param0 = 42) = param0;

// A function which has another function as default.
export int fd_default_call( int param0 = fd_1()) = param0;

// An auto-uniform function.
export color fd_auto_uniform() = color();

// An auto-varying function.
export color fd_auto_varying() = color(state::normal());

// A animated simple material.
export material blinker_material(
    color base = color(0.1),
    color light = color(1.0, 0.9, 0.0),
    bool enabled = true,
    float speed = 5.0)
= let {
    float sin_curve = math::sin(state::animation_time() * speed);
    bool shine = enabled && sin_curve > 0.25;
} in material(
    surface: material_surface(
        scattering: df::diffuse_reflection_bsdf(
            tint: base
        ),
        emission: material_emission(
            emission: df::diffuse_edf(),
            intensity: shine ? light : color(0.0)
        )
    )
);

// Blend between a diffuse and a glossy bsdf
export material example_diffuse_glossy_blend(
    color diffuse_tint = color(0.0, 1.0, 0.0),
    color glossy_tint = color(0.0, 0.0, 1.0),
    float weight = 0.5 [[anno::hard_range(0.0f, 1.0f)]]
) = material(
    surface: material_surface(
        scattering: df::weighted_layer(
            weight: weight,
            layer: df::simple_glossy_bsdf(
                roughness_u: 0.04,
                roughness_v: 0.05,
                tint: glossy_tint,
                handle: "glossy"
            ),
            base: df::diffuse_reflection_bsdf(
                tint: diffuse_tint,
                handle: "diffuse"
            )
        )
    )
);

export material example_tiled(
    uniform texture_2d base = texture_2d("./resources/tiled_resource.<##>.<UDIM>.png")
) = let {
    float3 tex_coord = state::texture_coordinate(0);
} in material(
    surface: material_surface(
        scattering: df::diffuse_reflection_bsdf(
            tint: tex::lookup_color(base, float2(tex_coord.x, tex_coord.y))
        )
    )
);

export int example_let_expressions(int x) =
  let {
    int x_plus_1 = x + 1;
    int x_minus_1 = x - 1;
  } in x_plus_1 + x_minus_1;


export color procedural_colored_rings(
    float2 tex_coords,
    float thickness,
    float power,
    float time,
    int iterations,
    float offset
)
{
    // uv with origin in the center
    float2 uv = math::frac(tex_coords) * 2.0 - 1.0;

    // accumulate rings of different size
    color tint_sum(0.0);
    for (int i = 0; i < iterations; ++i)
    {
        // signed distance function for the color selection
        float d = math::length(uv);

        // cosine based coloring
        float phi = d + i * 0.33;
        color tint_contrib = math::cos(math::TWO_PI * (float3(0.0, 0.1, 0.2) + phi)) * 0.5 + 0.5;

        // signed distance function for a ring + add some contrast
        d = math::abs(math::sin(d * 16 + time) * 0.0625);
        d = math::pow(0.005 * thickness / math::max(d, 0.0001), power);

        // add contribution
        tint_sum += tint_contrib * d;
        // offset the coordinate for the next iteration
        uv = math::frac(uv * offset) - 0.5;
    }
    return tint_sum;
}

export material example_procedural(
    float thickness = 1.0    [[ anno::hard_range(0.1, 5.0) ]],
    float power = 1.1        [[ anno::hard_range(0.1, 3.0) ]],
    float offset = 1.85      [[ anno::hard_range(0.0, math::PI) ]],
    int iterations = 5       [[ anno::hard_range(1, 10) ]],
    uniform bool animated = true,
    uniform bool emission = false,
    float glossy_roughness = 0.8
) = let {
    float3 tex_coord = state::texture_coordinate(0);
    color procedural_tint = procedural_colored_rings(
        tex_coords: float2(tex_coord.x, tex_coord.y),
        thickness: thickness,
        power: power,
        time: animated ? state::animation_time() : 1.0,
        iterations: iterations,
        offset: offset
    );
}
in material(
    surface: material_surface(
        scattering: df::simple_glossy_bsdf(
            roughness_u: glossy_roughness * (1.0 - math::saturate(math::luminance(procedural_tint))),
            tint: emission ? color(0.0) : procedural_tint
        ),
        emission:  material_emission (
            emission: df::diffuse_edf(),
            intensity: emission ? procedural_tint : color(0.0)
        )
    )
);

export material example_volume(
    uniform color absorption_color = color(0.234),
    uniform float absorption_distance = 0.36,
    uniform color scattering_color = color(0.368, 0.691, 0.603)
) = let {
    float eps = 0.00001;
    color extinction_coeff = -math::log(math::max(color(eps), absorption_color)) / math::max(eps, absorption_distance);
    color scattering_coeff = extinction_coeff * scattering_color;
    color absorbtion_coeff = extinction_coeff - scattering_coeff;
} in material(
    surface: material_surface(
        scattering: df::microfacet_ggx_vcavities_bsdf(
            roughness_u: 0.0,
            mode: df::scatter_transmit)
    ),
    volume: material_volume(
        absorption_coefficient: absorbtion_coeff,
        scattering_coefficient: scattering_coeff
    ),
    ior: color(1.0)
);
