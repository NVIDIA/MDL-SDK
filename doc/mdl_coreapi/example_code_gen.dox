/******************************************************************************
 * Copyright (c) 2024-2025, NVIDIA CORPORATION. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *  * Neither the name of NVIDIA CORPORATION nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *****************************************************************************/

namespace mi {
namespace mdl {

/*! \page mi_mdl_core_example_code_gen Example for Code Generation

<div align="right">
    [\link mi_mdl_core_example_calls Previous\endlink]
    [\link mi_mdl_core_examples Up\endlink]
    [\link mi_mdl_core_example_df_native Next\endlink]
</div>

This example illustrates the necessary steps from loading an MDL module and processing a material
up to the point where shader code is generated for a selected backend (DAG, PTX, HSLS, GLSL and
LLVM_IR) for potential serialization.

For the DAG backend, the helper class \c Material_compiler is used. This class takes
care of the compilation of a material into the DAG representation. For the rest of the backends
(PTX, HLSL, GLSL and LLVM_IR), the helper class \c Material_backend_compiler is used.
This class, derived from \c Material_compiler, not only takes care of compiling the material into
the DAG representation, but also from the last to other backends.

For a detailed explanation about the previous helper classes, please refer to
\ref mi_mdl_core_example_shared and \ref mi_mdl_core_example_cuda_shared respectively.

\section example_code_gen_new New Topics

  - Different compilation modes and options
  - Target code generation for a material with multiple functions
  - Material distilling

\section example_code_gen_descr Detailed Description

<dl>
    <dt><b>
        Different compilation modes and options
    </b></dt>
    <dd><br>
        Please refer to \ref mdl_material_instances_modes for an introduction to instance and
        class compilation modes.

        When in class compilation mode, there are options to enable individual optimizations to
        narrow the performance gap towards instance compilation while sacrificing parts of the 
        real-time parameter edits.

        \c fold_ternary_on_df, \c fold_all_bool_parameters, and \c fold_all_enum_parameters reduce
        branching within the material by evaluating the corresponding conditions during compilation.
        The unused cases are not handled by the generated code anymore and therefore require
        recompilation and code regeneration whenever such a condition variable changed.
        The benefit of these optimizations are twofold, less branching for faster execution times
        and smaller generated code which potentially reduces the compile time of the generated code 
        as well. 
        <!-- Workaround to prevent a layout problem after dd tags. -->
    </dd>
    <dt><b>
        Target code generation for a material with multiple functions
    </b></dt>
    <dd><br>
        Depending on the renderer, code for multiple functions of an MDL material needs to be
        generated in order to produce a full-featured rendering.
        
        When integrating MDL into a renderer one would start with the \c "surface.scattering" 
        expression which is responsible for the scattering behavior and thereby the most important 
        aspect of the visual appearance. In addition to that, \c "geometry.cutout_opacity" is 
        required the handle transparent or semi-transparent surfaces like leafs of a plant or wire 
        fences. There are more expressions to account for and the example shows how to select them 
        and how to register them at a link unit for code generation. 
        <!-- Workaround to prevent a layout problem after dd tags. -->
    </dd>
    <dt><b>
        Material distilling
    </b></dt>
    <dd><br>
        This example makes use of the \c Distiller_helper helper class. Please refer to
        \ref mi_mdl_core_example_distilling_shared for an introduction to material distilling in
        MDL and a description of this helper class.
        
        To distill a material to a specific target model, this example creates an instance of the
        helper class \c Distiller_helper and then call \c Distiller_helper::distill(). The function
        requires to pass a compiled instance of the source material and the desired target model.
        Upon successful execution, the function returns a compiled version of the distilled target material.
        
        Finally the example continues as normal creating target code for the selected material
        expressions and the desired backend.        
        <!-- Workaround to prevent a layout problem after dd tags. -->
    </dd>
</dl>

\section example_code_gen Example Source

<b>Source Code Location:</b>
  <tt>examples/mdl_core/code_gen/example_code_gen.cpp</tt>

\include code_gen/example_code_gen.cpp

<div align="right">
    [\link mi_mdl_core_example_calls Previous\endlink]
    [\link mi_mdl_core_examples Up\endlink]
    [\link mi_mdl_core_example_df_native Next\endlink]
</div>

*/

}
}
